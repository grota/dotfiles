#!/usr/bin/env bash

FZFLLM=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)/$(basename -- "${BASH_SOURCE[0]}")
_bgreen() { printf "%b%s%b" '\e[1;32m' "$@" '\e[0m' ; }
_bwhite() { printf "%b%s%b" '\e[1;37m' "$@" '\e[0m' ; }
_white() { printf "%b%s%b" '\e[0;37m' "$@" '\e[0m' ; }

DB="$HOME/.config/io.datasette.llm/logs.db"

LLM_GET_THREAD_CMD="${LLM_GET_THREAD_CMD:-llm logs list --cid {1}}"
LLM_OPEN_IN_PAGER_CMD="${LLM_OPEN_IN_PAGER_CMD:-bat --language markdown --color always --paging=always --plain --pager=\"less -R -+S --wordwrap\"}"
LLM_PREVIEW_DECORATOR="${LLM_PREVIEW_DECORATOR:-bat --language markdown --color always --plain}"

KEY_TOGGLE_HEADER="${KEY_TOGGLE_HEADER:-alt-/}"
KEY_NEW_THREAD="${KEY_NEW_THREAD:-ctrl-t}"
KEY_SEARCH_THREADS="${KEY_SEARCH_THREADS:-ctrl-/}"
KEY_DELETE="${KEY_DELETE:-ctrl-delete}"
KEY_OPEN_IN_PAGER="${KEY_OPEN_IN_PAGER:-enter}"
KEY_OPEN_IN_EDITOR="${KEY_OPEN_IN_EDITOR:-alt-enter}"
KEY_CONTINUE_THREAD="${KEY_CONTINUE_THREAD:-ctrl-o}"
KEY_RENAME_THREAD="${KEY_RENAME_THREAD:-ctrl-r}"
KEY_EDIT_THREAD_MESSAGES="${KEY_EDIT_THREAD_MESSAGES:-alt-e}"
KEY_SHOW_HELP="${KEY_SHOW_HELP:-?}"
KEY_CHANGE_PREVIEW_PRESET="${KEY_CHANGE_PREVIEW_PRESET:-ctrl-g}"
KEY_PREVIEW_UP_1="${KEY_PREVIEW_UP_1:-alt-k}"
KEY_PREVIEW_UP_2="${KEY_PREVIEW_UP_2:-alt-p}"
KEY_PREVIEW_DOWN_1="${KEY_PREVIEW_DOWN_1:-alt-j}"
KEY_PREVIEW_DOWN_2="${KEY_PREVIEW_DOWN_2:-alt-n}"

HEADER_TEXT="Press $KEY_SHOW_HELP for help"

# Just UI/UX/style, can be freely changed.
FZFLLM_FZF_GRAPHICAL_OPTS="
--layout=reverse --height='100%'
--preview-window='right,60%,wrap,border-rounded'
--bind='$KEY_CHANGE_PREVIEW_PRESET:change-preview-window:right,76%,wrap|right,60%,wrap'
--border=\"bold\" --color=gutter:-1,border:#4e440c,preview-border:#1d077d,preview-scrollbar:bright-black
--header '$HEADER_TEXT' --header-first
--info=hidden
--cycle --no-sort --exit-0 --tiebreak=index
--listen --bind='start:execute-silent:{ sleep 2 && curl -XPOST localhost:\$FZF_PORT -d hide-header ; }&'
"

# We assume NUL-terminated input to fzf to accomodate multiline input.
# See https://junegunn.github.io/fzf/tips/processing-multi-line-items/
# Input to fzf is assumed to be tab delimited, with the thread id in
# the first field and text in the second.
FZFLLM_FZF_GENERAL_OPTS="
$FZFLLM_FZF_GRAPHICAL_OPTS
--ansi --no-multi --no-select-1
--nth=1 --with-nth=2 --delimiter='\x1F' --read0 --highlight-line
--bind='$KEY_PREVIEW_UP_1:preview-up,$KEY_PREVIEW_UP_2:preview-up'
--bind='$KEY_PREVIEW_DOWN_1:preview-down,$KEY_PREVIEW_DOWN_2:preview-down'
--bind='$KEY_SHOW_HELP:preview($FZFLLM help)'
--bind='$KEY_TOGGLE_HEADER:toggle-header'
$FZFLLM_FZF_GENERAL_OPTS"

# We prefer the pattern transform[echo print:SUBCOMMAND \"{1}\"]+accept
# instead of execute($FZFLLM SUBCOMMAND {1})+print(list_threads)+accept
# because with execute the spawned process will inherit the environment
# and inheriting FZF_DEFAULT_OPTS is a problem (duplicates).
FZFLLM_BINDS_FOR_LIST_OF_THREADS="
--preview='$LLM_GET_THREAD_CMD | $LLM_PREVIEW_DECORATOR'
--bind='$KEY_OPEN_IN_PAGER:execute($LLM_GET_THREAD_CMD | $LLM_OPEN_IN_PAGER_CMD)'
--bind='$KEY_DELETE:transform[echo print:delete_thread {1}]+accept'
--bind='$KEY_OPEN_IN_EDITOR:execute($LLM_GET_THREAD_CMD | $FZFLLM open_stdin_in_editor)'
--bind='$KEY_NEW_THREAD:print(new_thread)+accept'
--bind='$KEY_CONTINUE_THREAD:transform[echo print:continue_thread {1}]+accept'
--bind='$KEY_SEARCH_THREADS:transform[echo print:search_threads \"{fzf:query}\"]+accept'
--bind='$KEY_RENAME_THREAD:transform[echo print:rename_thread {1} {2}]+accept'
--bind='$KEY_EDIT_THREAD_MESSAGES:transform[echo print:edit_thread_messages {1}]+accept'
"

fifo=$(mktemp -u "fzfllm_fifo_XXXX.md" --tmpdir)
mkfifo "$fifo"

function cleanup {
  rm -f "$fifo"
}

trap cleanup EXIT

_fzfllm_main() {
  local NEXT_COMMAND=list_threads
  local NEXT_COMMAND_PARAMS=
  local PREVIOUS_COMMAND=
  while true; do
    PREVIOUS_COMMAND="$NEXT_COMMAND"
    # shellcheck disable=SC2086
    IFS=' ' read -r NEXT_COMMAND NEXT_COMMAND_PARAMS < <($FZFLLM "$NEXT_COMMAND" $NEXT_COMMAND_PARAMS)
    # For debug:
    # echo in main loop parsed: NEXT_COMMAND is "|$NEXT_COMMAND|" and NEXT_COMMAND_PARAMS is "|$NEXT_COMMAND_PARAMS|" 1>&2
    # sleep 1
    if [ -z "$NEXT_COMMAND" ] && [ "$PREVIOUS_COMMAND" == list_threads ]; then
      return
    fi
    if [ -z "$NEXT_COMMAND" ]; then
      NEXT_COMMAND=list_threads
    fi
    if [ "$NEXT_COMMAND" == exitfzfllm ]; then
      return
    fi done
}

_fzfllm_list_threads() {
  local OPTS="
  $FZF_DEFAULT_OPTS
  $FZFLLM_FZF_GENERAL_OPTS
  $FZFLLM_BINDS_FOR_LIST_OF_THREADS
  --prompt=\"üßµthreads\> \"
  --pointer='üëâ'
  $FZFLLM_LIST_THREADS_FZF_OPTS"

  local CONVERSATIONS_QUERY="
  SELECT conversations.id, conversations.name
  FROM conversations
  INNER JOIN responses on conversations.id=responses.conversation_id
  GROUP BY conversations.id
  ORDER BY responses.datetime_utc DESC"
  _fzfllm_execute_query "$CONVERSATIONS_QUERY" | FZF_DEFAULT_OPTS="$OPTS" fzf
}

_fzfllm_search_threads() {
  local OPTS="
  $FZF_DEFAULT_OPTS
  $FZFLLM_FZF_GENERAL_OPTS
  $FZFLLM_BINDS_FOR_LIST_OF_THREADS
  --prompt=\"results\> \"
  --pointer='üëâ'
  $FZFLLM_SEARCH_THREADS_FZF_OPTS"

  local SEARCH_QUERY="
  SELECT conversations.id, conversations.name
    FROM responses
    LEFT JOIN conversations ON responses.conversation_id = conversations.id
    JOIN responses_fts ON responses_fts.rowid = responses.rowid
    WHERE responses_fts match $*
    ORDER BY responses_fts.rank DESC"
  local SEARCH_RESULTS
  # Here we do no care much about keeping newlines from the results because
  # we fetch conversations.name. Also command substitution would strip the null
  # byte so we need to transform it back to a normal newline.
  SEARCH_RESULTS=$(_fzfllm_execute_query "$SEARCH_QUERY" | tr '\0' '\n')
  if [ -z "${SEARCH_RESULTS}" ]; then
    read -e -r -p "No results found."
    return
  fi
  echo -E "$SEARCH_RESULTS" | tr $'\n' '\0' | FZF_DEFAULT_OPTS="$OPTS" fzf
}

_fzfllm_edit_thread_messages() {
  local OPTS="
  $FZF_DEFAULT_OPTS
  $FZFLLM_FZF_GENERAL_OPTS
  --preview='$FZFLLM preview_message {1} | $LLM_PREVIEW_DECORATOR'
  --prompt=\"üó® messages\> \"
  --bind='$KEY_DELETE:transform[echo print:delete_message {1}]+accept'
  --bind='$KEY_OPEN_IN_PAGER:execute($FZFLLM preview_message {1} | $LLM_OPEN_IN_PAGER_CMD)'
  --bind='$KEY_OPEN_IN_EDITOR:execute($FZFLLM preview_message {1} | $FZFLLM open_stdin_in_editor)'
  $FZFLLM_EDIT_THREAD_MESSAGES_FZF_OPTS"

  _fzfllm_execute_query "
  SELECT id, substring(prompt, 0, 1000) from responses where conversation_id='$1'
  ORDER BY datetime_utc ASC
  " | FZF_DEFAULT_OPTS="$OPTS" fzf
}

_fzfllm_preview_message() {
  IFS=$'\x1f' read -r -d '' -a sections < <(_fzfllm_execute_query "SELECT prompt, response, datetime_utc from responses where id='$1'")
  echo "# Message from ${sections[2]:0:19}"
  echo
  echo "## üßë Prompt:"
  echo
  echo "${sections[0]}"
  echo
  echo "## ü§ñ Response:"
  echo
  echo "${sections[1]}"
}

_fzfllm_delete_thread() {
  _fzfllm_execute_query "
  DELETE FROM responses WHERE conversation_id = '${1}';
  DELETE FROM conversations WHERE id = '${1}';"
}

_fzfllm_delete_message() {
  cid=$(_fzfllm_execute_query "SELECT conversation_id FROM responses WHERE id = '${1}'" | tr '\0' '\n')
  _fzfllm_execute_query "DELETE FROM responses WHERE id = '${1}';"
  remaining_messages=$(_fzfllm_execute_query "SELECT count(*) FROM responses WHERE conversation_id = '${cid}'" | tr '\0' '\n')
  if [ "$remaining_messages" -eq 0 ]; then
    _fzfllm_execute_query "DELETE FROM conversations WHERE id = '${cid}';"
    return
  fi
  echo edit_thread_messages "$cid"
}

_fzfllm_open_stdin_in_editor() {
  local FILE
  FILE=$(mktemp "fzfllm_cid_${1}_XXX.md" --tmpdir)
  cat > "$FILE"
  "${EDITOR:-nvim}" "$FILE"
  rm -f "$FILE"
}

_fzfllm_new_thread() {
  local COMMAND
  COMMAND=$(navi --best-match --query 'llm new chat' --print)
  read -e -r -i "$COMMAND" -p "Start new thread with command: " NEWCOMMAND
  $NEWCOMMAND > /dev/tty
}

_fzfllm_continue_thread() {
  llm chat --cid "$1" > /dev/tty
}

_fzfllm_rename_thread() {
  local CID="$1"
  shift
  read -e -r -i "$*" -p "Rename: " NEW_NAME
  if [ -z "$NEW_NAME" ]; then
    read -r -p "Aborted."
    return
  fi
  local UPDATE_QUERY="UPDATE conversations SET name='$NEW_NAME' WHERE id='$CID'"
  _fzfllm_execute_query "$UPDATE_QUERY"
}

_fzfllm_help() {
  local HELP_TEXT
  HELP_TEXT="$(_bwhite "‚å®  Keys:")
  $(_bgreen "$KEY_NEW_THREAD"): start a NEW THREAD.
  $(_bgreen "${KEY_RENAME_THREAD}"): RENAME the current thread.
  $(_bgreen "${KEY_EDIT_THREAD_MESSAGES}"): EDIT THE MESSAGES of the current thread.
  $(_bgreen "$KEY_OPEN_IN_PAGER"): OPEN IN PAGER the currently selected thread.
  $(_bgreen "$KEY_OPEN_IN_EDITOR"): OPEN IN EDITOR the currently selected thread.
  $(_bgreen "$KEY_CONTINUE_THREAD"): CONTINUE the currently selected thread.
  $(_bgreen "$KEY_DELETE"): DELETE the currently select entry.
  $(_bgreen "$KEY_SEARCH_THREADS"): SEARCH threads matching the current query (sqlite fts5 in prompts and responses).

  $(_bgreen "${KEY_TOGGLE_HEADER}"): toggles the header help (the one showing the \"$HEADER_TEXT\" text)
  $(_bgreen "$KEY_CHANGE_PREVIEW_PRESET"): toggles between the two preview layout presets.
  $(_bgreen "$KEY_PREVIEW_DOWN_1", "$KEY_PREVIEW_DOWN_2"): scrolls the preview down.
  $(_bgreen "$KEY_PREVIEW_UP_1", "$KEY_PREVIEW_UP_2"): scrolls the preview up.

  Other default fzf mappings apply, like the following:
  $(_white "ctrl-c Esc ctrl-q"): to quit
  $(_white "ctrl-j ctrl-n down"): to go down
  $(_white "ctrl-k ctrl-p up"): to go up

  Keys can be freely changed but only via env vars for now, read the source code to see how :)
  "
  echo "$HELP_TEXT"
}

# sqlite3 seems to have a problem if we specify the separator as a NUL byte directly.
_fzfllm_execute_query() {
  sqlite3 -separator $'\x1F' -newline $'\x1E' "$DB" "$1" | tr $'\x1E' '\0'
}

# Function to create a box around text using UTF-8 characters
create_box() {
  local text="$1"
  local padding=2
  local max_overall_width="${FZF_PREVIEW_COLUMNS}"
  local longest_text_width_found=0
  local formatted_text=""
  local line
  local max_text_width
  local width_of_text_plus_padding

  # 2 is for the 2 external vertical lines
  # then padding is times 2 because of left and right
  (( max_text_width = max_overall_width - 2 - padding * 2 ))
  # Format the text by breaking lines longer than max_overall_width
  while IFS= read -r line; do
    while [[ ${#line} -gt $((max_text_width)) ]]; do
      formatted_text+="${line:0:$((max_text_width))}"'\0'
      line=${line:$((max_text_width))}
    done
    formatted_text+="$line"'\0'
  done <<< "$text"

  # Calculate the longest_text_width_found of the box
  {
    echo -E "$formatted_text" | sed -e 's/\\0/\x00/g' > "$fifo"
  } &
  while IFS= read -d '' -r line; do
    (( ${#line} > longest_text_width_found )) && longest_text_width_found=${#line}
  done < "$fifo"

  (( width_of_text_plus_padding = longest_text_width_found + (padding * 2) ))

  # Print the top border
  printf "‚îå"
  printf "%${width_of_text_plus_padding}s" "" | sed "s/ /‚îÄ/g"
  printf "‚îê\n"

  # Print |text with padding|
  echo -E "$formatted_text" | sed -e 's/\\0/\x00/g' | while IFS= read -d '' -r line; do
    printf "‚îÇ%${padding}s%-${longest_text_width_found}s%${padding}s‚îÇ\n" "" "$line" ""
  done

  # Print the bottom border
  printf "‚îî"
  printf "%${width_of_text_plus_padding}s" | sed "s/ /‚îÄ/g"
  printf "‚îò\n"
}

# This subcommand parses the stdin which is assumed to be
# the output of `llm template show some_template`.
# It outputs a string like `-p param1 value1 -p param2 value2 -p param3 value3`
# where each value is the value taken from the defaults section or XXX.
# We print first the pairs that have a default.
function _fzfllm_extract_params_from_llm_template() {
  local stdinvalue
  stdinvalue=$(cat)
  declare -A defaults
  while read -r key value; do
    defaults[$key]=$value
  done < <(awk '/^defaults:/, /^[\^ ]/ { if($1 != "defaults:" && $1 != "") { gsub(":", ""); print $1, $2 } }' <<< "$stdinvalue")
  local dollar_words_in_stdin
  dollar_words_in_stdin=$(grep -o '\$[a-zA-Z0-9_]\+' <<< "$stdinvalue" | sort | uniq | sed 's/\$//g')
  while read -r param; do
    if [[ -n "${defaults[$param]}" ]]; then
      echo -n "-p $param ${defaults[$param]} "
    fi
  done <<< "$dollar_words_in_stdin"
  while read -r param; do
    if [[ -z "${defaults[$param]}" ]]; then
      echo -n "-p $param XXX "
    fi
  done <<< "$dollar_words_in_stdin"
}

cmd="${1:-main}"
shift

public_commands=(
  "main"
  "list_threads"
  "new_thread"
  "delete_thread"
  "delete_message"
  "open_stdin_in_editor"
  "search_threads"
  "continue_thread"
  "rename_thread"
  "edit_thread_messages"
  "preview_message"
  "help"
  "extract_params_from_llm_template"
  # "execute_query"
)

# shellcheck disable=SC2076
if [[ ! " ${public_commands[*]} " =~ " ${cmd} " ]] ; then
  echo Invalid command "$cmd"
  sleep 1
  exit 1
fi

_fzfllm_"${cmd}" "$@"
